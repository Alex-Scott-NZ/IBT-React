/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query BookByUri($uri: String!) {\n  bookBy(uri: $uri) {\n    bookDetails {\n      displayOnIbtBooks\n      fieldGroupName\n      summary\n      subheading\n      relatedArticles {\n        nodes {\n          ... on Article {\n            contentTypeName\n            guid\n            id\n            link\n            slug\n            status\n            title\n            uri\n            articleDetails {\n              tableOfContentsTitle\n              subtitle\n              displayDate\n              displayOnFrontPage\n              publicationDate\n            }\n          }\n        }\n      }\n    }\n    contentTypeName\n    featuredImageDatabaseId\n    featuredImageId\n    id\n    link\n    modified\n    modifiedGmt\n    parentDatabaseId\n    parentId\n    slug\n    status\n    title\n    uri\n    featuredImage {\n      node {\n        ...FragmentFeaturedImage\n      }\n    }\n  }\n}": types.BookByUriDocument,
    "fragment FragmentFeaturedImage on MediaItem {\n  altText\n  link\n  mediaItemId\n  mediaItemUrl\n  description\n  guid\n  id\n  sizes\n  slug\n  sourceUrl\n  srcSet\n  mediaDetails {\n    height\n    width\n    sizes {\n      file\n      fileSize\n      height\n      mimeType\n      name\n      sourceUrl\n      width\n    }\n  }\n}": types.FragmentFeaturedImageFragmentDoc,
    "query GetArticleById($id: ID!) {\n  article(id: $id, idType: DATABASE_ID) {\n    articleId\n    content\n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    featuredImageDatabaseId\n    featuredImageId\n    id\n    isTermNode\n    modified\n    modifiedGmt\n    parentDatabaseId\n    parentId\n    password\n    previewRevisionDatabaseId\n    previewRevisionId\n    slug\n    status\n    title\n    uri\n    articleDetails {\n      displayDate\n      displayOnFrontPage\n      fieldGroupName\n      publicationDate\n      source\n      subtitle\n      suppressDate\n      tableOfContentsTitle\n    }\n    featuredImage {\n      node {\n        ...FragmentFeaturedImage\n      }\n    }\n  }\n}": types.GetArticleByIdDocument,
    "query GetArticleByUri($uri: ID!) {\n  article(id: $uri, idType: URI) {\n    articleId\n    content\n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    featuredImageDatabaseId\n    featuredImageId\n    id\n    isTermNode\n    modified\n    modifiedGmt\n    parentDatabaseId\n    parentId\n    password\n    previewRevisionDatabaseId\n    previewRevisionId\n    slug\n    status\n    title\n    uri\n    articleDetails {\n      displayDate\n      displayOnFrontPage\n      fieldGroupName\n      publicationDate\n      source\n      subtitle\n      suppressDate\n      tableOfContentsTitle\n      relatedPdf {\n        nodes {\n          ... on PdfItem {\n            contentTypeName\n            databaseId\n            date\n            dateGmt\n            desiredSlug\n            enclosure\n            guid\n            hasPassword\n            id\n            isComment\n            isContentNode\n            isFrontPage\n            isPostsPage\n            isPreview\n            isRestricted\n            isTermNode\n            link\n            modified\n            modifiedGmt\n            password\n            pdfItemId\n            previewRevisionDatabaseId\n            previewRevisionId\n            slug\n            status\n            title\n            uri\n            pdfItemDetails {\n              fieldGroupName\n              pdfFile {\n                cursor\n                node {\n                  fileSize(size: null)\n                  link\n                  mediaDetails {\n                    file\n                    height\n                    width\n                    sizes {\n                      file\n                      fileSize\n                      height\n                      mimeType\n                      name\n                      sourceUrl\n                      width\n                    }\n                  }\n                  slug\n                  sourceUrl\n                  srcSet\n                  contentTypeName\n                  contentType {\n                    node {\n                      canExport\n                      deleteWithUser\n                      description\n                      excludeFromSearch\n                      graphqlPluralName\n                      graphqlSingleName\n                      hasArchive\n                      hierarchical\n                      id\n                      isComment\n                      isContentNode\n                      isFrontPage\n                      isPostsPage\n                      isRestricted\n                      isTermNode\n                      label\n                      menuIcon\n                      menuPosition\n                      name\n                      public\n                      publiclyQueryable\n                      restBase\n                      restControllerClass\n                      showInAdminBar\n                      showInGraphql\n                      showInMenu\n                      showInNavMenus\n                      showInRest\n                      showUi\n                      uri\n                    }\n                  }\n                  mediaItemId\n                  mediaItemUrl\n                  mediaType\n                  mimeType\n                  sizes\n                  uri\n                  title\n                }\n              }\n              relatedArticle {\n                nodes {\n                  uri\n                  ... on Article {\n                    articleId\n                    content\n                    contentTypeName\n                    databaseId\n                    date\n                    dateGmt\n                    desiredSlug\n                    enclosure\n                    featuredImageDatabaseId\n                    featuredImageId\n                    guid\n                    hasPassword\n                    id\n                    isComment\n                    isContentNode\n                    isFrontPage\n                    isPostsPage\n                    isPreview\n                    isRestricted\n                    isTermNode\n                    link\n                    modified\n                    modifiedGmt\n                    parentDatabaseId\n                    parentId\n                    password\n                    previewRevisionDatabaseId\n                    previewRevisionId\n                    slug\n                    status\n                    title\n                    uri\n                  }\n                  slug\n                }\n              }\n            }\n          }\n          ... on JournalIssue {\n            contentTypeName\n            databaseId\n            date\n            dateGmt\n            desiredSlug\n            enclosure\n            featuredImageDatabaseId\n            featuredImageId\n            guid\n            hasPassword\n            id\n            isComment\n            isContentNode\n            isFrontPage\n            isPostsPage\n            isPreview\n            isRestricted\n            isTermNode\n            journalIssueId\n            link\n            modified\n            modifiedGmt\n            parentDatabaseId\n            parentId\n            password\n            previewRevisionDatabaseId\n            previewRevisionId\n            slug\n            status\n            title\n            uri\n          }\n          ... on AudioItem {\n            audioItemId\n            contentTypeName\n            databaseId\n            date\n            dateGmt\n            desiredSlug\n            enclosure\n            guid\n            hasPassword\n            id\n            isComment\n            isContentNode\n            isFrontPage\n            isPostsPage\n            isPreview\n            isRestricted\n            isTermNode\n            link\n            modified\n            modifiedGmt\n            parentDatabaseId\n            parentId\n            password\n            previewRevisionDatabaseId\n            previewRevisionId\n            slug\n            status\n            title\n            uri\n          }\n          ... on MediaItem {\n            altText\n            authorDatabaseId\n            authorId\n            caption\n            commentCount\n            commentStatus\n            contentTypeName\n            databaseId\n            date\n            dateGmt\n            description\n            desiredSlug\n            enclosure\n            fileSize\n            guid\n            hasPassword\n            id\n            isComment\n            isContentNode\n            isFrontPage\n            isPostsPage\n            isPreview\n            isRestricted\n            isTermNode\n            link\n            mediaItemId\n            mediaItemUrl\n            mediaType\n            mimeType\n            modified\n            modifiedGmt\n            parentDatabaseId\n            parentId\n            password\n            previewRevisionDatabaseId\n            previewRevisionId\n            sizes\n            slug\n            sourceUrl\n            srcSet\n            status\n            title\n            uri\n          }\n          ... on Book {\n            bookId\n            contentTypeName\n            databaseId\n            date\n            dateGmt\n            desiredSlug\n            enclosure\n            featuredImageDatabaseId\n            featuredImageId\n            guid\n            hasPassword\n            id\n            isComment\n            isContentNode\n            isFrontPage\n            isPostsPage\n            isPreview\n            isRestricted\n            isTermNode\n            link\n            modified\n            modifiedGmt\n            parentDatabaseId\n            parentId\n            password\n            previewRevisionDatabaseId\n            previewRevisionId\n            slug\n            status\n            title\n            uri\n          }\n          ... on Article {\n            articleId\n            content\n            contentTypeName\n            databaseId\n            date\n            dateGmt\n            desiredSlug\n            enclosure\n            featuredImageDatabaseId\n            featuredImageId\n            guid\n            hasPassword\n            id\n            isComment\n            isContentNode\n            isFrontPage\n            isPostsPage\n            isPreview\n            isRestricted\n            isTermNode\n            link\n            modified\n            modifiedGmt\n            parentDatabaseId\n            parentId\n            password\n            previewRevisionDatabaseId\n            previewRevisionId\n            slug\n            status\n            title\n            uri\n          }\n        }\n      }\n    }\n    featuredImage {\n      node {\n        ...FragmentFeaturedImage\n      }\n    }\n  }\n}": types.GetArticleByUriDocument,
    "query GetBooks {\n  books {\n    nodes {\n      contentTypeName\n      featuredImageDatabaseId\n      featuredImageId\n      id\n      isComment\n      isContentNode\n      isFrontPage\n      isPostsPage\n      isPreview\n      isRestricted\n      isTermNode\n      link\n      modified\n      modifiedGmt\n      parentDatabaseId\n      parentId\n      password\n      previewRevisionDatabaseId\n      previewRevisionId\n      slug\n      status\n      title\n      uri\n      bookDetails {\n        displayOnIbtBooks\n        fieldGroupName\n        subheading\n        summary\n        relatedArticles {\n          edges {\n            node {\n              ... on Article {\n                contentTypeName\n                guid\n                id\n                link\n                slug\n                status\n                title\n                uri\n                articleDetails {\n                  tableOfContentsTitle\n                  subtitle\n                  displayDate\n                  displayOnFrontPage\n                  publicationDate\n                }\n              }\n            }\n          }\n        }\n      }\n      featuredImage {\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n    }\n  }\n}": types.GetBooksDocument,
    "query GetArticles {\n  articles(\n    first: 50\n    where: {orderby: {field: META_VALUE_NUM, order: DESC}, metaKey: \"publication_date\", metaQuery: [{key: \"display_on_front_page\", compare: \"=\", value: \"1\"}]}\n  ) {\n    nodes {\n      id\n      title\n      content\n      slug\n      featuredImage {\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n      articleDetails {\n        displayDate\n        displayOnFrontPage\n        fieldGroupName\n        publicationDate\n        source\n        subtitle\n        suppressDate\n        tableOfContentsTitle\n        relatedJournal {\n          edges {\n            node {\n              ... on JournalIssue {\n                contentTypeName\n                databaseId\n                date\n                dateGmt\n                featuredImageDatabaseId\n                featuredImageId\n                guid\n                id\n                isContentNode\n                journalIssueId\n                link\n                slug\n                status\n                uri\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}": types.GetArticlesDocument,
    "query GetGlobalSettings {\n  globalSettings {\n    fGGlobalSettings {\n      bannerImage {\n        cursor\n        node {\n          altText\n          srcSet\n          sourceUrl\n          mediaDetails {\n            height\n            width\n          }\n        }\n      }\n      notificationBar {\n        fieldGroupName\n        notificationMessage\n        notificationOnoff\n      }\n      bannerImageTwitter {\n        cursor\n        node {\n          altText\n          srcSet\n          sourceUrl\n          mediaDetails {\n            height\n            width\n          }\n        }\n      }\n    }\n  }\n}": types.GetGlobalSettingsDocument,
    "query GetJournalByUri($uri: String!) {\n  journalIssueBy(uri: $uri) {\n    title\n    featuredImage {\n      node {\n        ...FragmentFeaturedImage\n      }\n    }\n    journalIssueDetails {\n      fieldGroupName\n      publicationDate\n      articlesInJournal {\n        nodes {\n          slug\n          ... on Article {\n            articleDetails {\n              displayDate\n              displayOnFrontPage\n              fieldGroupName\n              publicationDate\n              source\n              subtitle\n              suppressDate\n              tableOfContentsTitle\n            }\n            title\n            uri\n          }\n        }\n      }\n    }\n  }\n}": types.GetJournalByUriDocument,
    "query GetJournalIssues {\n  journalIssues {\n    nodes {\n      journalIssueDetails {\n        articlesInJournal {\n          nodes {\n            ... on Article {\n              articleDetails {\n                displayDate\n                displayOnFrontPage\n                fieldGroupName\n                publicationDate\n                source\n                subtitle\n                suppressDate\n                tableOfContentsTitle\n              }\n              title\n              slug\n              id\n            }\n            slug\n          }\n        }\n        fieldGroupName\n        publicationDate\n      }\n      slug\n      title\n      featuredImage {\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n    }\n  }\n}": types.GetJournalIssuesDocument,
    "query GetJournalIssuesLatest {\n  journalIssues(\n    where: {metaQuery: [{key: \"publication_date\", compare: \"EXISTS\"}], orderby: {field: META_VALUE_NUM, order: DESC}, metaKey: \"publication_date\"}\n    first: 1\n  ) {\n    nodes {\n      journalIssueDetails {\n        fieldGroupName\n        publicationDate\n      }\n      slug\n      title\n      featuredImage {\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n    }\n  }\n}": types.GetJournalIssuesLatestDocument,
    "query GetPlaceholderSettings {\n  placeholderSettings {\n    placeholderSettingsFields {\n      placeholderSetup {\n        contentSelector\n        placeholderSelector\n        textContentGroup {\n          freeTextHeading\n          freeTextImage {\n            node {\n              altText\n              caption\n              contentTypeName\n              databaseId\n              description\n              guid\n              id\n              link\n              mediaItemId\n              mediaItemUrl\n              mediaType\n              slug\n              sourceUrl\n              srcSet\n              uri\n              dateGmt\n            }\n          }\n          freeTextLink {\n            nodes {\n              contentTypeName\n              databaseId\n              id\n              modifiedGmt\n              slug\n              status\n              uri\n              dateGmt\n            }\n          }\n          textContent\n        }\n      }\n    }\n  }\n}": types.GetPlaceholderSettingsDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query BookByUri($uri: String!) {\n  bookBy(uri: $uri) {\n    bookDetails {\n      displayOnIbtBooks\n      fieldGroupName\n      summary\n      subheading\n      relatedArticles {\n        nodes {\n          ... on Article {\n            contentTypeName\n            guid\n            id\n            link\n            slug\n            status\n            title\n            uri\n            articleDetails {\n              tableOfContentsTitle\n              subtitle\n              displayDate\n              displayOnFrontPage\n              publicationDate\n            }\n          }\n        }\n      }\n    }\n    contentTypeName\n    featuredImageDatabaseId\n    featuredImageId\n    id\n    link\n    modified\n    modifiedGmt\n    parentDatabaseId\n    parentId\n    slug\n    status\n    title\n    uri\n    featuredImage {\n      node {\n        ...FragmentFeaturedImage\n      }\n    }\n  }\n}"): (typeof documents)["query BookByUri($uri: String!) {\n  bookBy(uri: $uri) {\n    bookDetails {\n      displayOnIbtBooks\n      fieldGroupName\n      summary\n      subheading\n      relatedArticles {\n        nodes {\n          ... on Article {\n            contentTypeName\n            guid\n            id\n            link\n            slug\n            status\n            title\n            uri\n            articleDetails {\n              tableOfContentsTitle\n              subtitle\n              displayDate\n              displayOnFrontPage\n              publicationDate\n            }\n          }\n        }\n      }\n    }\n    contentTypeName\n    featuredImageDatabaseId\n    featuredImageId\n    id\n    link\n    modified\n    modifiedGmt\n    parentDatabaseId\n    parentId\n    slug\n    status\n    title\n    uri\n    featuredImage {\n      node {\n        ...FragmentFeaturedImage\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment FragmentFeaturedImage on MediaItem {\n  altText\n  link\n  mediaItemId\n  mediaItemUrl\n  description\n  guid\n  id\n  sizes\n  slug\n  sourceUrl\n  srcSet\n  mediaDetails {\n    height\n    width\n    sizes {\n      file\n      fileSize\n      height\n      mimeType\n      name\n      sourceUrl\n      width\n    }\n  }\n}"): (typeof documents)["fragment FragmentFeaturedImage on MediaItem {\n  altText\n  link\n  mediaItemId\n  mediaItemUrl\n  description\n  guid\n  id\n  sizes\n  slug\n  sourceUrl\n  srcSet\n  mediaDetails {\n    height\n    width\n    sizes {\n      file\n      fileSize\n      height\n      mimeType\n      name\n      sourceUrl\n      width\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetArticleById($id: ID!) {\n  article(id: $id, idType: DATABASE_ID) {\n    articleId\n    content\n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    featuredImageDatabaseId\n    featuredImageId\n    id\n    isTermNode\n    modified\n    modifiedGmt\n    parentDatabaseId\n    parentId\n    password\n    previewRevisionDatabaseId\n    previewRevisionId\n    slug\n    status\n    title\n    uri\n    articleDetails {\n      displayDate\n      displayOnFrontPage\n      fieldGroupName\n      publicationDate\n      source\n      subtitle\n      suppressDate\n      tableOfContentsTitle\n    }\n    featuredImage {\n      node {\n        ...FragmentFeaturedImage\n      }\n    }\n  }\n}"): (typeof documents)["query GetArticleById($id: ID!) {\n  article(id: $id, idType: DATABASE_ID) {\n    articleId\n    content\n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    featuredImageDatabaseId\n    featuredImageId\n    id\n    isTermNode\n    modified\n    modifiedGmt\n    parentDatabaseId\n    parentId\n    password\n    previewRevisionDatabaseId\n    previewRevisionId\n    slug\n    status\n    title\n    uri\n    articleDetails {\n      displayDate\n      displayOnFrontPage\n      fieldGroupName\n      publicationDate\n      source\n      subtitle\n      suppressDate\n      tableOfContentsTitle\n    }\n    featuredImage {\n      node {\n        ...FragmentFeaturedImage\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetArticleByUri($uri: ID!) {\n  article(id: $uri, idType: URI) {\n    articleId\n    content\n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    featuredImageDatabaseId\n    featuredImageId\n    id\n    isTermNode\n    modified\n    modifiedGmt\n    parentDatabaseId\n    parentId\n    password\n    previewRevisionDatabaseId\n    previewRevisionId\n    slug\n    status\n    title\n    uri\n    articleDetails {\n      displayDate\n      displayOnFrontPage\n      fieldGroupName\n      publicationDate\n      source\n      subtitle\n      suppressDate\n      tableOfContentsTitle\n      relatedPdf {\n        nodes {\n          ... on PdfItem {\n            contentTypeName\n            databaseId\n            date\n            dateGmt\n            desiredSlug\n            enclosure\n            guid\n            hasPassword\n            id\n            isComment\n            isContentNode\n            isFrontPage\n            isPostsPage\n            isPreview\n            isRestricted\n            isTermNode\n            link\n            modified\n            modifiedGmt\n            password\n            pdfItemId\n            previewRevisionDatabaseId\n            previewRevisionId\n            slug\n            status\n            title\n            uri\n            pdfItemDetails {\n              fieldGroupName\n              pdfFile {\n                cursor\n                node {\n                  fileSize(size: null)\n                  link\n                  mediaDetails {\n                    file\n                    height\n                    width\n                    sizes {\n                      file\n                      fileSize\n                      height\n                      mimeType\n                      name\n                      sourceUrl\n                      width\n                    }\n                  }\n                  slug\n                  sourceUrl\n                  srcSet\n                  contentTypeName\n                  contentType {\n                    node {\n                      canExport\n                      deleteWithUser\n                      description\n                      excludeFromSearch\n                      graphqlPluralName\n                      graphqlSingleName\n                      hasArchive\n                      hierarchical\n                      id\n                      isComment\n                      isContentNode\n                      isFrontPage\n                      isPostsPage\n                      isRestricted\n                      isTermNode\n                      label\n                      menuIcon\n                      menuPosition\n                      name\n                      public\n                      publiclyQueryable\n                      restBase\n                      restControllerClass\n                      showInAdminBar\n                      showInGraphql\n                      showInMenu\n                      showInNavMenus\n                      showInRest\n                      showUi\n                      uri\n                    }\n                  }\n                  mediaItemId\n                  mediaItemUrl\n                  mediaType\n                  mimeType\n                  sizes\n                  uri\n                  title\n                }\n              }\n              relatedArticle {\n                nodes {\n                  uri\n                  ... on Article {\n                    articleId\n                    content\n                    contentTypeName\n                    databaseId\n                    date\n                    dateGmt\n                    desiredSlug\n                    enclosure\n                    featuredImageDatabaseId\n                    featuredImageId\n                    guid\n                    hasPassword\n                    id\n                    isComment\n                    isContentNode\n                    isFrontPage\n                    isPostsPage\n                    isPreview\n                    isRestricted\n                    isTermNode\n                    link\n                    modified\n                    modifiedGmt\n                    parentDatabaseId\n                    parentId\n                    password\n                    previewRevisionDatabaseId\n                    previewRevisionId\n                    slug\n                    status\n                    title\n                    uri\n                  }\n                  slug\n                }\n              }\n            }\n          }\n          ... on JournalIssue {\n            contentTypeName\n            databaseId\n            date\n            dateGmt\n            desiredSlug\n            enclosure\n            featuredImageDatabaseId\n            featuredImageId\n            guid\n            hasPassword\n            id\n            isComment\n            isContentNode\n            isFrontPage\n            isPostsPage\n            isPreview\n            isRestricted\n            isTermNode\n            journalIssueId\n            link\n            modified\n            modifiedGmt\n            parentDatabaseId\n            parentId\n            password\n            previewRevisionDatabaseId\n            previewRevisionId\n            slug\n            status\n            title\n            uri\n          }\n          ... on AudioItem {\n            audioItemId\n            contentTypeName\n            databaseId\n            date\n            dateGmt\n            desiredSlug\n            enclosure\n            guid\n            hasPassword\n            id\n            isComment\n            isContentNode\n            isFrontPage\n            isPostsPage\n            isPreview\n            isRestricted\n            isTermNode\n            link\n            modified\n            modifiedGmt\n            parentDatabaseId\n            parentId\n            password\n            previewRevisionDatabaseId\n            previewRevisionId\n            slug\n            status\n            title\n            uri\n          }\n          ... on MediaItem {\n            altText\n            authorDatabaseId\n            authorId\n            caption\n            commentCount\n            commentStatus\n            contentTypeName\n            databaseId\n            date\n            dateGmt\n            description\n            desiredSlug\n            enclosure\n            fileSize\n            guid\n            hasPassword\n            id\n            isComment\n            isContentNode\n            isFrontPage\n            isPostsPage\n            isPreview\n            isRestricted\n            isTermNode\n            link\n            mediaItemId\n            mediaItemUrl\n            mediaType\n            mimeType\n            modified\n            modifiedGmt\n            parentDatabaseId\n            parentId\n            password\n            previewRevisionDatabaseId\n            previewRevisionId\n            sizes\n            slug\n            sourceUrl\n            srcSet\n            status\n            title\n            uri\n          }\n          ... on Book {\n            bookId\n            contentTypeName\n            databaseId\n            date\n            dateGmt\n            desiredSlug\n            enclosure\n            featuredImageDatabaseId\n            featuredImageId\n            guid\n            hasPassword\n            id\n            isComment\n            isContentNode\n            isFrontPage\n            isPostsPage\n            isPreview\n            isRestricted\n            isTermNode\n            link\n            modified\n            modifiedGmt\n            parentDatabaseId\n            parentId\n            password\n            previewRevisionDatabaseId\n            previewRevisionId\n            slug\n            status\n            title\n            uri\n          }\n          ... on Article {\n            articleId\n            content\n            contentTypeName\n            databaseId\n            date\n            dateGmt\n            desiredSlug\n            enclosure\n            featuredImageDatabaseId\n            featuredImageId\n            guid\n            hasPassword\n            id\n            isComment\n            isContentNode\n            isFrontPage\n            isPostsPage\n            isPreview\n            isRestricted\n            isTermNode\n            link\n            modified\n            modifiedGmt\n            parentDatabaseId\n            parentId\n            password\n            previewRevisionDatabaseId\n            previewRevisionId\n            slug\n            status\n            title\n            uri\n          }\n        }\n      }\n    }\n    featuredImage {\n      node {\n        ...FragmentFeaturedImage\n      }\n    }\n  }\n}"): (typeof documents)["query GetArticleByUri($uri: ID!) {\n  article(id: $uri, idType: URI) {\n    articleId\n    content\n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    featuredImageDatabaseId\n    featuredImageId\n    id\n    isTermNode\n    modified\n    modifiedGmt\n    parentDatabaseId\n    parentId\n    password\n    previewRevisionDatabaseId\n    previewRevisionId\n    slug\n    status\n    title\n    uri\n    articleDetails {\n      displayDate\n      displayOnFrontPage\n      fieldGroupName\n      publicationDate\n      source\n      subtitle\n      suppressDate\n      tableOfContentsTitle\n      relatedPdf {\n        nodes {\n          ... on PdfItem {\n            contentTypeName\n            databaseId\n            date\n            dateGmt\n            desiredSlug\n            enclosure\n            guid\n            hasPassword\n            id\n            isComment\n            isContentNode\n            isFrontPage\n            isPostsPage\n            isPreview\n            isRestricted\n            isTermNode\n            link\n            modified\n            modifiedGmt\n            password\n            pdfItemId\n            previewRevisionDatabaseId\n            previewRevisionId\n            slug\n            status\n            title\n            uri\n            pdfItemDetails {\n              fieldGroupName\n              pdfFile {\n                cursor\n                node {\n                  fileSize(size: null)\n                  link\n                  mediaDetails {\n                    file\n                    height\n                    width\n                    sizes {\n                      file\n                      fileSize\n                      height\n                      mimeType\n                      name\n                      sourceUrl\n                      width\n                    }\n                  }\n                  slug\n                  sourceUrl\n                  srcSet\n                  contentTypeName\n                  contentType {\n                    node {\n                      canExport\n                      deleteWithUser\n                      description\n                      excludeFromSearch\n                      graphqlPluralName\n                      graphqlSingleName\n                      hasArchive\n                      hierarchical\n                      id\n                      isComment\n                      isContentNode\n                      isFrontPage\n                      isPostsPage\n                      isRestricted\n                      isTermNode\n                      label\n                      menuIcon\n                      menuPosition\n                      name\n                      public\n                      publiclyQueryable\n                      restBase\n                      restControllerClass\n                      showInAdminBar\n                      showInGraphql\n                      showInMenu\n                      showInNavMenus\n                      showInRest\n                      showUi\n                      uri\n                    }\n                  }\n                  mediaItemId\n                  mediaItemUrl\n                  mediaType\n                  mimeType\n                  sizes\n                  uri\n                  title\n                }\n              }\n              relatedArticle {\n                nodes {\n                  uri\n                  ... on Article {\n                    articleId\n                    content\n                    contentTypeName\n                    databaseId\n                    date\n                    dateGmt\n                    desiredSlug\n                    enclosure\n                    featuredImageDatabaseId\n                    featuredImageId\n                    guid\n                    hasPassword\n                    id\n                    isComment\n                    isContentNode\n                    isFrontPage\n                    isPostsPage\n                    isPreview\n                    isRestricted\n                    isTermNode\n                    link\n                    modified\n                    modifiedGmt\n                    parentDatabaseId\n                    parentId\n                    password\n                    previewRevisionDatabaseId\n                    previewRevisionId\n                    slug\n                    status\n                    title\n                    uri\n                  }\n                  slug\n                }\n              }\n            }\n          }\n          ... on JournalIssue {\n            contentTypeName\n            databaseId\n            date\n            dateGmt\n            desiredSlug\n            enclosure\n            featuredImageDatabaseId\n            featuredImageId\n            guid\n            hasPassword\n            id\n            isComment\n            isContentNode\n            isFrontPage\n            isPostsPage\n            isPreview\n            isRestricted\n            isTermNode\n            journalIssueId\n            link\n            modified\n            modifiedGmt\n            parentDatabaseId\n            parentId\n            password\n            previewRevisionDatabaseId\n            previewRevisionId\n            slug\n            status\n            title\n            uri\n          }\n          ... on AudioItem {\n            audioItemId\n            contentTypeName\n            databaseId\n            date\n            dateGmt\n            desiredSlug\n            enclosure\n            guid\n            hasPassword\n            id\n            isComment\n            isContentNode\n            isFrontPage\n            isPostsPage\n            isPreview\n            isRestricted\n            isTermNode\n            link\n            modified\n            modifiedGmt\n            parentDatabaseId\n            parentId\n            password\n            previewRevisionDatabaseId\n            previewRevisionId\n            slug\n            status\n            title\n            uri\n          }\n          ... on MediaItem {\n            altText\n            authorDatabaseId\n            authorId\n            caption\n            commentCount\n            commentStatus\n            contentTypeName\n            databaseId\n            date\n            dateGmt\n            description\n            desiredSlug\n            enclosure\n            fileSize\n            guid\n            hasPassword\n            id\n            isComment\n            isContentNode\n            isFrontPage\n            isPostsPage\n            isPreview\n            isRestricted\n            isTermNode\n            link\n            mediaItemId\n            mediaItemUrl\n            mediaType\n            mimeType\n            modified\n            modifiedGmt\n            parentDatabaseId\n            parentId\n            password\n            previewRevisionDatabaseId\n            previewRevisionId\n            sizes\n            slug\n            sourceUrl\n            srcSet\n            status\n            title\n            uri\n          }\n          ... on Book {\n            bookId\n            contentTypeName\n            databaseId\n            date\n            dateGmt\n            desiredSlug\n            enclosure\n            featuredImageDatabaseId\n            featuredImageId\n            guid\n            hasPassword\n            id\n            isComment\n            isContentNode\n            isFrontPage\n            isPostsPage\n            isPreview\n            isRestricted\n            isTermNode\n            link\n            modified\n            modifiedGmt\n            parentDatabaseId\n            parentId\n            password\n            previewRevisionDatabaseId\n            previewRevisionId\n            slug\n            status\n            title\n            uri\n          }\n          ... on Article {\n            articleId\n            content\n            contentTypeName\n            databaseId\n            date\n            dateGmt\n            desiredSlug\n            enclosure\n            featuredImageDatabaseId\n            featuredImageId\n            guid\n            hasPassword\n            id\n            isComment\n            isContentNode\n            isFrontPage\n            isPostsPage\n            isPreview\n            isRestricted\n            isTermNode\n            link\n            modified\n            modifiedGmt\n            parentDatabaseId\n            parentId\n            password\n            previewRevisionDatabaseId\n            previewRevisionId\n            slug\n            status\n            title\n            uri\n          }\n        }\n      }\n    }\n    featuredImage {\n      node {\n        ...FragmentFeaturedImage\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetBooks {\n  books {\n    nodes {\n      contentTypeName\n      featuredImageDatabaseId\n      featuredImageId\n      id\n      isComment\n      isContentNode\n      isFrontPage\n      isPostsPage\n      isPreview\n      isRestricted\n      isTermNode\n      link\n      modified\n      modifiedGmt\n      parentDatabaseId\n      parentId\n      password\n      previewRevisionDatabaseId\n      previewRevisionId\n      slug\n      status\n      title\n      uri\n      bookDetails {\n        displayOnIbtBooks\n        fieldGroupName\n        subheading\n        summary\n        relatedArticles {\n          edges {\n            node {\n              ... on Article {\n                contentTypeName\n                guid\n                id\n                link\n                slug\n                status\n                title\n                uri\n                articleDetails {\n                  tableOfContentsTitle\n                  subtitle\n                  displayDate\n                  displayOnFrontPage\n                  publicationDate\n                }\n              }\n            }\n          }\n        }\n      }\n      featuredImage {\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GetBooks {\n  books {\n    nodes {\n      contentTypeName\n      featuredImageDatabaseId\n      featuredImageId\n      id\n      isComment\n      isContentNode\n      isFrontPage\n      isPostsPage\n      isPreview\n      isRestricted\n      isTermNode\n      link\n      modified\n      modifiedGmt\n      parentDatabaseId\n      parentId\n      password\n      previewRevisionDatabaseId\n      previewRevisionId\n      slug\n      status\n      title\n      uri\n      bookDetails {\n        displayOnIbtBooks\n        fieldGroupName\n        subheading\n        summary\n        relatedArticles {\n          edges {\n            node {\n              ... on Article {\n                contentTypeName\n                guid\n                id\n                link\n                slug\n                status\n                title\n                uri\n                articleDetails {\n                  tableOfContentsTitle\n                  subtitle\n                  displayDate\n                  displayOnFrontPage\n                  publicationDate\n                }\n              }\n            }\n          }\n        }\n      }\n      featuredImage {\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetArticles {\n  articles(\n    first: 50\n    where: {orderby: {field: META_VALUE_NUM, order: DESC}, metaKey: \"publication_date\", metaQuery: [{key: \"display_on_front_page\", compare: \"=\", value: \"1\"}]}\n  ) {\n    nodes {\n      id\n      title\n      content\n      slug\n      featuredImage {\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n      articleDetails {\n        displayDate\n        displayOnFrontPage\n        fieldGroupName\n        publicationDate\n        source\n        subtitle\n        suppressDate\n        tableOfContentsTitle\n        relatedJournal {\n          edges {\n            node {\n              ... on JournalIssue {\n                contentTypeName\n                databaseId\n                date\n                dateGmt\n                featuredImageDatabaseId\n                featuredImageId\n                guid\n                id\n                isContentNode\n                journalIssueId\n                link\n                slug\n                status\n                uri\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GetArticles {\n  articles(\n    first: 50\n    where: {orderby: {field: META_VALUE_NUM, order: DESC}, metaKey: \"publication_date\", metaQuery: [{key: \"display_on_front_page\", compare: \"=\", value: \"1\"}]}\n  ) {\n    nodes {\n      id\n      title\n      content\n      slug\n      featuredImage {\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n      articleDetails {\n        displayDate\n        displayOnFrontPage\n        fieldGroupName\n        publicationDate\n        source\n        subtitle\n        suppressDate\n        tableOfContentsTitle\n        relatedJournal {\n          edges {\n            node {\n              ... on JournalIssue {\n                contentTypeName\n                databaseId\n                date\n                dateGmt\n                featuredImageDatabaseId\n                featuredImageId\n                guid\n                id\n                isContentNode\n                journalIssueId\n                link\n                slug\n                status\n                uri\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetGlobalSettings {\n  globalSettings {\n    fGGlobalSettings {\n      bannerImage {\n        cursor\n        node {\n          altText\n          srcSet\n          sourceUrl\n          mediaDetails {\n            height\n            width\n          }\n        }\n      }\n      notificationBar {\n        fieldGroupName\n        notificationMessage\n        notificationOnoff\n      }\n      bannerImageTwitter {\n        cursor\n        node {\n          altText\n          srcSet\n          sourceUrl\n          mediaDetails {\n            height\n            width\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GetGlobalSettings {\n  globalSettings {\n    fGGlobalSettings {\n      bannerImage {\n        cursor\n        node {\n          altText\n          srcSet\n          sourceUrl\n          mediaDetails {\n            height\n            width\n          }\n        }\n      }\n      notificationBar {\n        fieldGroupName\n        notificationMessage\n        notificationOnoff\n      }\n      bannerImageTwitter {\n        cursor\n        node {\n          altText\n          srcSet\n          sourceUrl\n          mediaDetails {\n            height\n            width\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetJournalByUri($uri: String!) {\n  journalIssueBy(uri: $uri) {\n    title\n    featuredImage {\n      node {\n        ...FragmentFeaturedImage\n      }\n    }\n    journalIssueDetails {\n      fieldGroupName\n      publicationDate\n      articlesInJournal {\n        nodes {\n          slug\n          ... on Article {\n            articleDetails {\n              displayDate\n              displayOnFrontPage\n              fieldGroupName\n              publicationDate\n              source\n              subtitle\n              suppressDate\n              tableOfContentsTitle\n            }\n            title\n            uri\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GetJournalByUri($uri: String!) {\n  journalIssueBy(uri: $uri) {\n    title\n    featuredImage {\n      node {\n        ...FragmentFeaturedImage\n      }\n    }\n    journalIssueDetails {\n      fieldGroupName\n      publicationDate\n      articlesInJournal {\n        nodes {\n          slug\n          ... on Article {\n            articleDetails {\n              displayDate\n              displayOnFrontPage\n              fieldGroupName\n              publicationDate\n              source\n              subtitle\n              suppressDate\n              tableOfContentsTitle\n            }\n            title\n            uri\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetJournalIssues {\n  journalIssues {\n    nodes {\n      journalIssueDetails {\n        articlesInJournal {\n          nodes {\n            ... on Article {\n              articleDetails {\n                displayDate\n                displayOnFrontPage\n                fieldGroupName\n                publicationDate\n                source\n                subtitle\n                suppressDate\n                tableOfContentsTitle\n              }\n              title\n              slug\n              id\n            }\n            slug\n          }\n        }\n        fieldGroupName\n        publicationDate\n      }\n      slug\n      title\n      featuredImage {\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GetJournalIssues {\n  journalIssues {\n    nodes {\n      journalIssueDetails {\n        articlesInJournal {\n          nodes {\n            ... on Article {\n              articleDetails {\n                displayDate\n                displayOnFrontPage\n                fieldGroupName\n                publicationDate\n                source\n                subtitle\n                suppressDate\n                tableOfContentsTitle\n              }\n              title\n              slug\n              id\n            }\n            slug\n          }\n        }\n        fieldGroupName\n        publicationDate\n      }\n      slug\n      title\n      featuredImage {\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetJournalIssuesLatest {\n  journalIssues(\n    where: {metaQuery: [{key: \"publication_date\", compare: \"EXISTS\"}], orderby: {field: META_VALUE_NUM, order: DESC}, metaKey: \"publication_date\"}\n    first: 1\n  ) {\n    nodes {\n      journalIssueDetails {\n        fieldGroupName\n        publicationDate\n      }\n      slug\n      title\n      featuredImage {\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GetJournalIssuesLatest {\n  journalIssues(\n    where: {metaQuery: [{key: \"publication_date\", compare: \"EXISTS\"}], orderby: {field: META_VALUE_NUM, order: DESC}, metaKey: \"publication_date\"}\n    first: 1\n  ) {\n    nodes {\n      journalIssueDetails {\n        fieldGroupName\n        publicationDate\n      }\n      slug\n      title\n      featuredImage {\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetPlaceholderSettings {\n  placeholderSettings {\n    placeholderSettingsFields {\n      placeholderSetup {\n        contentSelector\n        placeholderSelector\n        textContentGroup {\n          freeTextHeading\n          freeTextImage {\n            node {\n              altText\n              caption\n              contentTypeName\n              databaseId\n              description\n              guid\n              id\n              link\n              mediaItemId\n              mediaItemUrl\n              mediaType\n              slug\n              sourceUrl\n              srcSet\n              uri\n              dateGmt\n            }\n          }\n          freeTextLink {\n            nodes {\n              contentTypeName\n              databaseId\n              id\n              modifiedGmt\n              slug\n              status\n              uri\n              dateGmt\n            }\n          }\n          textContent\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GetPlaceholderSettings {\n  placeholderSettings {\n    placeholderSettingsFields {\n      placeholderSetup {\n        contentSelector\n        placeholderSelector\n        textContentGroup {\n          freeTextHeading\n          freeTextImage {\n            node {\n              altText\n              caption\n              contentTypeName\n              databaseId\n              description\n              guid\n              id\n              link\n              mediaItemId\n              mediaItemUrl\n              mediaType\n              slug\n              sourceUrl\n              srcSet\n              uri\n              dateGmt\n            }\n          }\n          freeTextLink {\n            nodes {\n              contentTypeName\n              databaseId\n              id\n              modifiedGmt\n              slug\n              status\n              uri\n              dateGmt\n            }\n          }\n          textContent\n        }\n      }\n    }\n  }\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;