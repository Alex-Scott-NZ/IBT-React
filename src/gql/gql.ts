/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query BookByUri($uri: String!) {\n  bookBy(uri: $uri) {\n    bookDetails {\n      displayOnIbtBooks\n      fieldGroupName\n      summary\n      subheading\n      relatedArticles {\n        nodes {\n          ... on Article {\n            contentTypeName\n            guid\n            id\n            link\n            slug\n            status\n            title\n            uri\n            articleDetails {\n              tableOfContentsTitle\n              subtitle\n              displayDate\n              displayOnFrontPage\n              publicationDate\n            }\n          }\n        }\n      }\n    }\n    contentTypeName\n    featuredImageDatabaseId\n    featuredImageId\n    id\n    link\n    modified\n    modifiedGmt\n    parentDatabaseId\n    parentId\n    slug\n    status\n    title\n    uri\n    featuredImage {\n      node {\n        ...FragmentFeaturedImage\n      }\n    }\n  }\n}": types.BookByUriDocument,
    "fragment FragmentAudioItem on AudioItem {\n  audioItemId\n  contentTypeName\n  databaseId\n  date\n  dateGmt\n  guid\n  id\n  link\n  modified\n  modifiedGmt\n  title\n  uri\n  audioItemDetails {\n    articlePageCaption\n    audioEmbedCode\n    fieldGroupName\n    landingPageDescription\n  }\n}": types.FragmentAudioItemFragmentDoc,
    "fragment FragmentBook on Book {\n  contentTypeName\n  databaseId\n  date\n  dateGmt\n  featuredImageDatabaseId\n  featuredImageId\n  guid\n  id\n  modified\n  modifiedGmt\n  slug\n  status\n  title\n  uri\n  featuredImage {\n    node {\n      __typename\n      ...FragmentFeaturedImage\n    }\n  }\n  bookDetails {\n    displayOnIbtBooks\n    fieldGroupName\n    subheading\n    summary\n    relatedArticles {\n      nodes {\n        ...FragmentRelatedArticle\n      }\n    }\n  }\n}": types.FragmentBookFragmentDoc,
    "fragment FragmentJournalIssue on JournalIssue {\n  contentTypeName\n  databaseId\n  date\n  dateGmt\n  featuredImageDatabaseId\n  featuredImageId\n  guid\n  id\n  journalIssueId\n  link\n  modified\n  modifiedGmt\n  slug\n  status\n  title\n  uri\n  featuredImage {\n    node {\n      __typename\n      ...FragmentFeaturedImage\n    }\n  }\n}": types.FragmentJournalIssueFragmentDoc,
    "fragment FragmentJournalIssueDetails on JournalIssueDetails {\n  fieldGroupName\n  publicationDate\n  articlesInJournal(first: 20) {\n    nodes {\n      __typename\n      slug\n      ... on Article {\n        articleDetails {\n          displayDate\n          displayOnFrontPage\n          fieldGroupName\n          publicationDate\n          source\n          subtitle\n          suppressDate\n          tableOfContentsTitle\n        }\n        id\n        title\n        uri\n      }\n    }\n  }\n}": types.FragmentJournalIssueDetailsFragmentDoc,
    "fragment FragmentPdfItem on PdfItem {\n  contentTypeName\n  databaseId\n  date\n  dateGmt\n  guid\n  id\n  modified\n  modifiedGmt\n  pdfItemId\n  slug\n  status\n  title\n  uri\n  pdfItemDetails {\n    fieldGroupName\n    pdfFile {\n      cursor\n      node {\n        __typename\n        fileSize(size: null)\n        link\n        slug\n        contentTypeName\n        mediaItemId\n        mediaItemUrl\n        mediaType\n        mimeType\n        uri\n        title\n      }\n    }\n    relatedArticle {\n      nodes {\n        __typename\n        ... on Article {\n          articleId\n          contentTypeName\n          databaseId\n          date\n          dateGmt\n          guid\n          id\n          modified\n          modifiedGmt\n          slug\n          status\n          title\n          uri\n        }\n      }\n    }\n  }\n}": types.FragmentPdfItemFragmentDoc,
    "fragment FragmentRelatedArticle on Article {\n  __typename\n  contentTypeName\n  databaseId\n  date\n  dateGmt\n  desiredSlug\n  enclosure\n  guid\n  id\n  modified\n  modifiedGmt\n  previewRevisionDatabaseId\n  previewRevisionId\n  slug\n  status\n  title\n  uri\n}": types.FragmentRelatedArticleFragmentDoc,
    "fragment FragmentTerms on TermNode {\n  count\n  databaseId\n  description\n  id\n  isTermNode\n  name\n  slug\n  taxonomyName\n  termTaxonomyId\n  uri\n}": types.FragmentTermsFragmentDoc,
    "fragment FragmentVideoItem on VideoItem {\n  contentTypeName\n  databaseId\n  date\n  dateGmt\n  guid\n  id\n  link\n  modified\n  modifiedGmt\n  slug\n  status\n  uri\n  videoDetails {\n    videoEmbedCode\n    landingPageDescription\n    fieldGroupName\n    articlePageCaption\n  }\n}": types.FragmentVideoItemFragmentDoc,
    "fragment FragmentFeaturedImage on MediaItem {\n  altText\n  link\n  caption\n  mediaItemId\n  mediaItemUrl\n  description\n  guid\n  id\n  sizes\n  slug\n  sourceUrl\n  srcSet\n  thumbhash\n  mediaDetails {\n    height\n    width\n    sizes {\n      file\n      fileSize\n      height\n      mimeType\n      name\n      sourceUrl\n      width\n    }\n  }\n}": types.FragmentFeaturedImageFragmentDoc,
    "query GetArticleById($id: ID!) {\n  article(id: $id, idType: DATABASE_ID) {\n    articleId\n    content\n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    featuredImageDatabaseId\n    featuredImageId\n    id\n    isTermNode\n    modified\n    modifiedGmt\n    parentDatabaseId\n    parentId\n    password\n    previewRevisionDatabaseId\n    previewRevisionId\n    slug\n    status\n    title\n    uri\n    articleDetails {\n      displayDate\n      displayOnFrontPage\n      fieldGroupName\n      publicationDate\n      source\n      subtitle\n      suppressDate\n      tableOfContentsTitle\n    }\n    featuredImage {\n      node {\n        ...FragmentFeaturedImage\n      }\n    }\n  }\n}": types.GetArticleByIdDocument,
    "query GetArticleByUri($uri: ID!) {\n  article(id: $uri, idType: URI) {\n    articleId\n    content\n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    featuredImageDatabaseId\n    featuredImageId\n    id\n    modified\n    modifiedGmt\n    slug\n    status\n    title\n    uri\n    articleDetails {\n      displayDate\n      displayOnFrontPage\n      fieldGroupName\n      publicationDate\n      source\n      subtitle\n      suppressDate\n      tableOfContentsTitle\n      relatedPdf {\n        nodes {\n          __typename\n          ... on PdfItem {\n            ...FragmentPdfItem\n          }\n        }\n      }\n      relatedAudio {\n        nodes {\n          __typename\n          ... on AudioItem {\n            ...FragmentAudioItem\n          }\n        }\n      }\n      relatedJournal {\n        nodes {\n          __typename\n          ... on JournalIssue {\n            ...FragmentJournalIssue\n            journalIssueDetails {\n              ...FragmentJournalIssueDetails\n            }\n          }\n        }\n      }\n      relatedArticle {\n        nodes {\n          ...FragmentRelatedArticle\n        }\n      }\n      relatedVideo {\n        __typename\n        nodes {\n          contentTypeName\n          ... on VideoItem {\n            ...FragmentVideoItem\n          }\n        }\n      }\n      relatedBook {\n        __typename\n        nodes {\n          ... on Book {\n            ...FragmentBook\n          }\n        }\n      }\n    }\n    featuredImage {\n      node {\n        __typename\n        ...FragmentFeaturedImage\n      }\n    }\n    terms {\n      nodes {\n        __typename\n        ...FragmentTerms\n      }\n    }\n  }\n}": types.GetArticleByUriDocument,
    "query GetArticles($language: LanguageCodeFilterEnum!) {\n  articles(\n    first: 50\n    where: {orderby: {field: META_VALUE_NUM, order: DESC}, metaKey: \"publication_date\", metaQuery: [{key: \"display_on_front_page\", compare: \"=\", value: \"1\"}], language: $language}\n  ) {\n    nodes {\n      id\n      title\n      content\n      slug\n      featuredImage {\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n      articleDetails {\n        displayDate\n        displayOnFrontPage\n        fieldGroupName\n        publicationDate\n        source\n        subtitle\n        suppressDate\n        tableOfContentsTitle\n        relatedJournal {\n          edges {\n            node {\n              ... on JournalIssue {\n                contentTypeName\n                databaseId\n                date\n                dateGmt\n                featuredImageDatabaseId\n                featuredImageId\n                guid\n                id\n                isContentNode\n                journalIssueId\n                link\n                slug\n                status\n                uri\n                title\n              }\n            }\n          }\n        }\n      }\n      uri\n      language {\n        code\n        homeUrl\n        id\n        locale\n        name\n        slug\n      }\n    }\n  }\n}": types.GetArticlesDocument,
    "query GetArticlesByPlaceSlug($slug: ID!) {\n  termNode(id: $slug, taxonomy: PLACE, idType: SLUG) {\n    count\n    databaseId\n    description\n    id\n    isTermNode\n    name\n    slug\n    taxonomyName\n    termGroupId\n    termTaxonomyId\n    uri\n    ... on Place {\n      __typename\n      name\n      slug\n      uri\n      contentNodes {\n        nodes {\n          ... on Article {\n            __typename\n            articleId\n            contentTypeName\n            databaseId\n            date\n            dateGmt\n            featuredImageDatabaseId\n            featuredImageId\n            id\n            isContentNode\n            modified\n            modifiedGmt\n            parentDatabaseId\n            parentId\n            password\n            previewRevisionDatabaseId\n            previewRevisionId\n            slug\n            status\n            title\n            uri\n            articleDetails {\n              displayDate\n              displayOnFrontPage\n              publicationDate\n              source\n              subtitle\n              suppressDate\n              tableOfContentsTitle\n            }\n          }\n        }\n      }\n    }\n  }\n}": types.GetArticlesByPlaceSlugDocument,
    "query GetArticlesByTopicSlug($slug: ID!) {\n  termNode(id: $slug, taxonomy: TOPIC, idType: SLUG) {\n    count\n    databaseId\n    description\n    id\n    isTermNode\n    name\n    slug\n    taxonomyName\n    termGroupId\n    termTaxonomyId\n    uri\n    ... on Topic {\n      __typename\n      name\n      slug\n      uri\n      contentNodes {\n        nodes {\n          ... on Article {\n            __typename\n            articleId\n            contentTypeName\n            databaseId\n            date\n            dateGmt\n            featuredImageDatabaseId\n            featuredImageId\n            id\n            isContentNode\n            modified\n            modifiedGmt\n            parentDatabaseId\n            parentId\n            password\n            previewRevisionDatabaseId\n            previewRevisionId\n            slug\n            status\n            title\n            uri\n            articleDetails {\n              displayDate\n              displayOnFrontPage\n              publicationDate\n              source\n              subtitle\n              suppressDate\n              tableOfContentsTitle\n            }\n          }\n        }\n      }\n    }\n  }\n}": types.GetArticlesByTopicSlugDocument,
    "query GetAvailableLanguages {\n  languages {\n    code\n    homeUrl\n    id\n    locale\n    name\n    slug\n  }\n}": types.GetAvailableLanguagesDocument,
    "query GetBooks {\n  books {\n    nodes {\n      contentTypeName\n      featuredImageDatabaseId\n      featuredImageId\n      id\n      isComment\n      isContentNode\n      isFrontPage\n      isPostsPage\n      isPreview\n      isRestricted\n      isTermNode\n      link\n      modified\n      modifiedGmt\n      parentDatabaseId\n      parentId\n      password\n      previewRevisionDatabaseId\n      previewRevisionId\n      slug\n      status\n      title\n      uri\n      bookDetails {\n        displayOnIbtBooks\n        fieldGroupName\n        subheading\n        summary\n        relatedArticles {\n          edges {\n            node {\n              ... on Article {\n                contentTypeName\n                guid\n                id\n                link\n                slug\n                status\n                title\n                uri\n                articleDetails {\n                  tableOfContentsTitle\n                  subtitle\n                  displayDate\n                  displayOnFrontPage\n                  publicationDate\n                }\n              }\n            }\n          }\n        }\n      }\n      featuredImage {\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n    }\n  }\n}": types.GetBooksDocument,
    "query GetGlobalSettings {\n  globalSettings {\n    fGGlobalSettings {\n      bannerImage {\n        cursor\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n      notificationBar {\n        fieldGroupName\n        notificationMessage\n        notificationOnoff\n      }\n      bannerImageTwitter {\n        cursor\n        node {\n          altText\n          srcSet\n          sourceUrl\n          mediaDetails {\n            height\n            width\n          }\n        }\n      }\n      bannerImageTwitterSquare {\n        cursor\n        node {\n          altText\n          srcSet\n          sourceUrl\n          mediaDetails {\n            height\n            width\n          }\n        }\n      }\n    }\n  }\n}": types.GetGlobalSettingsDocument,
    "query GetJournalByUri($uri: String!) {\n  journalIssueBy(uri: $uri) {\n    title\n    featuredImage {\n      node {\n        ...FragmentFeaturedImage\n      }\n    }\n    journalIssueDetails {\n      ...FragmentJournalIssueDetails\n    }\n  }\n}": types.GetJournalByUriDocument,
    "query GetJournalIssues($language: LanguageCodeFilterEnum!) {\n  journalIssues(where: {language: $language}) {\n    nodes {\n      journalIssueDetails {\n        ...FragmentJournalIssueDetails\n      }\n      slug\n      title\n      featuredImage {\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n      language {\n        code\n        locale\n        name\n        slug\n      }\n    }\n  }\n}": types.GetJournalIssuesDocument,
    "query GetJournalIssuesLatest {\n  journalIssues(\n    where: {metaQuery: [{key: \"publication_date\", compare: \"EXISTS\"}], orderby: {field: META_VALUE_NUM, order: DESC}, metaKey: \"publication_date\"}\n    first: 1\n  ) {\n    nodes {\n      journalIssueDetails {\n        fieldGroupName\n        publicationDate\n      }\n      slug\n      title\n      featuredImage {\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n    }\n  }\n}": types.GetJournalIssuesLatestDocument,
    "query getPageByUri($uri: String!) {\n  pageBy(uri: $uri) {\n    title\n    contentTypeName\n    author {\n      cursor\n    }\n    content\n    date\n    dateGmt\n    modified\n    modifiedGmt\n    pageId\n    uri\n  }\n}": types.GetPageByUriDocument,
    "query GetPlaceholderSettings {\n  placeholderSettings {\n    placeholderSettingsFields {\n      placeholderSetup {\n        contentSelector\n        placeholderSelector\n        textContentGroup {\n          freeTextHeading\n          freeTextImage {\n            node {\n              altText\n              caption\n              contentTypeName\n              databaseId\n              description\n              guid\n              id\n              link\n              mediaItemId\n              mediaItemUrl\n              mediaType\n              slug\n              sourceUrl\n              srcSet\n              uri\n              dateGmt\n            }\n          }\n          freeTextLink {\n            nodes {\n              contentTypeName\n              databaseId\n              id\n              modifiedGmt\n              slug\n              status\n              uri\n              dateGmt\n            }\n          }\n          freeTextContent\n        }\n      }\n    }\n  }\n}": types.GetPlaceholderSettingsDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query BookByUri($uri: String!) {\n  bookBy(uri: $uri) {\n    bookDetails {\n      displayOnIbtBooks\n      fieldGroupName\n      summary\n      subheading\n      relatedArticles {\n        nodes {\n          ... on Article {\n            contentTypeName\n            guid\n            id\n            link\n            slug\n            status\n            title\n            uri\n            articleDetails {\n              tableOfContentsTitle\n              subtitle\n              displayDate\n              displayOnFrontPage\n              publicationDate\n            }\n          }\n        }\n      }\n    }\n    contentTypeName\n    featuredImageDatabaseId\n    featuredImageId\n    id\n    link\n    modified\n    modifiedGmt\n    parentDatabaseId\n    parentId\n    slug\n    status\n    title\n    uri\n    featuredImage {\n      node {\n        ...FragmentFeaturedImage\n      }\n    }\n  }\n}"): (typeof documents)["query BookByUri($uri: String!) {\n  bookBy(uri: $uri) {\n    bookDetails {\n      displayOnIbtBooks\n      fieldGroupName\n      summary\n      subheading\n      relatedArticles {\n        nodes {\n          ... on Article {\n            contentTypeName\n            guid\n            id\n            link\n            slug\n            status\n            title\n            uri\n            articleDetails {\n              tableOfContentsTitle\n              subtitle\n              displayDate\n              displayOnFrontPage\n              publicationDate\n            }\n          }\n        }\n      }\n    }\n    contentTypeName\n    featuredImageDatabaseId\n    featuredImageId\n    id\n    link\n    modified\n    modifiedGmt\n    parentDatabaseId\n    parentId\n    slug\n    status\n    title\n    uri\n    featuredImage {\n      node {\n        ...FragmentFeaturedImage\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment FragmentAudioItem on AudioItem {\n  audioItemId\n  contentTypeName\n  databaseId\n  date\n  dateGmt\n  guid\n  id\n  link\n  modified\n  modifiedGmt\n  title\n  uri\n  audioItemDetails {\n    articlePageCaption\n    audioEmbedCode\n    fieldGroupName\n    landingPageDescription\n  }\n}"): (typeof documents)["fragment FragmentAudioItem on AudioItem {\n  audioItemId\n  contentTypeName\n  databaseId\n  date\n  dateGmt\n  guid\n  id\n  link\n  modified\n  modifiedGmt\n  title\n  uri\n  audioItemDetails {\n    articlePageCaption\n    audioEmbedCode\n    fieldGroupName\n    landingPageDescription\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment FragmentBook on Book {\n  contentTypeName\n  databaseId\n  date\n  dateGmt\n  featuredImageDatabaseId\n  featuredImageId\n  guid\n  id\n  modified\n  modifiedGmt\n  slug\n  status\n  title\n  uri\n  featuredImage {\n    node {\n      __typename\n      ...FragmentFeaturedImage\n    }\n  }\n  bookDetails {\n    displayOnIbtBooks\n    fieldGroupName\n    subheading\n    summary\n    relatedArticles {\n      nodes {\n        ...FragmentRelatedArticle\n      }\n    }\n  }\n}"): (typeof documents)["fragment FragmentBook on Book {\n  contentTypeName\n  databaseId\n  date\n  dateGmt\n  featuredImageDatabaseId\n  featuredImageId\n  guid\n  id\n  modified\n  modifiedGmt\n  slug\n  status\n  title\n  uri\n  featuredImage {\n    node {\n      __typename\n      ...FragmentFeaturedImage\n    }\n  }\n  bookDetails {\n    displayOnIbtBooks\n    fieldGroupName\n    subheading\n    summary\n    relatedArticles {\n      nodes {\n        ...FragmentRelatedArticle\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment FragmentJournalIssue on JournalIssue {\n  contentTypeName\n  databaseId\n  date\n  dateGmt\n  featuredImageDatabaseId\n  featuredImageId\n  guid\n  id\n  journalIssueId\n  link\n  modified\n  modifiedGmt\n  slug\n  status\n  title\n  uri\n  featuredImage {\n    node {\n      __typename\n      ...FragmentFeaturedImage\n    }\n  }\n}"): (typeof documents)["fragment FragmentJournalIssue on JournalIssue {\n  contentTypeName\n  databaseId\n  date\n  dateGmt\n  featuredImageDatabaseId\n  featuredImageId\n  guid\n  id\n  journalIssueId\n  link\n  modified\n  modifiedGmt\n  slug\n  status\n  title\n  uri\n  featuredImage {\n    node {\n      __typename\n      ...FragmentFeaturedImage\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment FragmentJournalIssueDetails on JournalIssueDetails {\n  fieldGroupName\n  publicationDate\n  articlesInJournal(first: 20) {\n    nodes {\n      __typename\n      slug\n      ... on Article {\n        articleDetails {\n          displayDate\n          displayOnFrontPage\n          fieldGroupName\n          publicationDate\n          source\n          subtitle\n          suppressDate\n          tableOfContentsTitle\n        }\n        id\n        title\n        uri\n      }\n    }\n  }\n}"): (typeof documents)["fragment FragmentJournalIssueDetails on JournalIssueDetails {\n  fieldGroupName\n  publicationDate\n  articlesInJournal(first: 20) {\n    nodes {\n      __typename\n      slug\n      ... on Article {\n        articleDetails {\n          displayDate\n          displayOnFrontPage\n          fieldGroupName\n          publicationDate\n          source\n          subtitle\n          suppressDate\n          tableOfContentsTitle\n        }\n        id\n        title\n        uri\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment FragmentPdfItem on PdfItem {\n  contentTypeName\n  databaseId\n  date\n  dateGmt\n  guid\n  id\n  modified\n  modifiedGmt\n  pdfItemId\n  slug\n  status\n  title\n  uri\n  pdfItemDetails {\n    fieldGroupName\n    pdfFile {\n      cursor\n      node {\n        __typename\n        fileSize(size: null)\n        link\n        slug\n        contentTypeName\n        mediaItemId\n        mediaItemUrl\n        mediaType\n        mimeType\n        uri\n        title\n      }\n    }\n    relatedArticle {\n      nodes {\n        __typename\n        ... on Article {\n          articleId\n          contentTypeName\n          databaseId\n          date\n          dateGmt\n          guid\n          id\n          modified\n          modifiedGmt\n          slug\n          status\n          title\n          uri\n        }\n      }\n    }\n  }\n}"): (typeof documents)["fragment FragmentPdfItem on PdfItem {\n  contentTypeName\n  databaseId\n  date\n  dateGmt\n  guid\n  id\n  modified\n  modifiedGmt\n  pdfItemId\n  slug\n  status\n  title\n  uri\n  pdfItemDetails {\n    fieldGroupName\n    pdfFile {\n      cursor\n      node {\n        __typename\n        fileSize(size: null)\n        link\n        slug\n        contentTypeName\n        mediaItemId\n        mediaItemUrl\n        mediaType\n        mimeType\n        uri\n        title\n      }\n    }\n    relatedArticle {\n      nodes {\n        __typename\n        ... on Article {\n          articleId\n          contentTypeName\n          databaseId\n          date\n          dateGmt\n          guid\n          id\n          modified\n          modifiedGmt\n          slug\n          status\n          title\n          uri\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment FragmentRelatedArticle on Article {\n  __typename\n  contentTypeName\n  databaseId\n  date\n  dateGmt\n  desiredSlug\n  enclosure\n  guid\n  id\n  modified\n  modifiedGmt\n  previewRevisionDatabaseId\n  previewRevisionId\n  slug\n  status\n  title\n  uri\n}"): (typeof documents)["fragment FragmentRelatedArticle on Article {\n  __typename\n  contentTypeName\n  databaseId\n  date\n  dateGmt\n  desiredSlug\n  enclosure\n  guid\n  id\n  modified\n  modifiedGmt\n  previewRevisionDatabaseId\n  previewRevisionId\n  slug\n  status\n  title\n  uri\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment FragmentTerms on TermNode {\n  count\n  databaseId\n  description\n  id\n  isTermNode\n  name\n  slug\n  taxonomyName\n  termTaxonomyId\n  uri\n}"): (typeof documents)["fragment FragmentTerms on TermNode {\n  count\n  databaseId\n  description\n  id\n  isTermNode\n  name\n  slug\n  taxonomyName\n  termTaxonomyId\n  uri\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment FragmentVideoItem on VideoItem {\n  contentTypeName\n  databaseId\n  date\n  dateGmt\n  guid\n  id\n  link\n  modified\n  modifiedGmt\n  slug\n  status\n  uri\n  videoDetails {\n    videoEmbedCode\n    landingPageDescription\n    fieldGroupName\n    articlePageCaption\n  }\n}"): (typeof documents)["fragment FragmentVideoItem on VideoItem {\n  contentTypeName\n  databaseId\n  date\n  dateGmt\n  guid\n  id\n  link\n  modified\n  modifiedGmt\n  slug\n  status\n  uri\n  videoDetails {\n    videoEmbedCode\n    landingPageDescription\n    fieldGroupName\n    articlePageCaption\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment FragmentFeaturedImage on MediaItem {\n  altText\n  link\n  caption\n  mediaItemId\n  mediaItemUrl\n  description\n  guid\n  id\n  sizes\n  slug\n  sourceUrl\n  srcSet\n  thumbhash\n  mediaDetails {\n    height\n    width\n    sizes {\n      file\n      fileSize\n      height\n      mimeType\n      name\n      sourceUrl\n      width\n    }\n  }\n}"): (typeof documents)["fragment FragmentFeaturedImage on MediaItem {\n  altText\n  link\n  caption\n  mediaItemId\n  mediaItemUrl\n  description\n  guid\n  id\n  sizes\n  slug\n  sourceUrl\n  srcSet\n  thumbhash\n  mediaDetails {\n    height\n    width\n    sizes {\n      file\n      fileSize\n      height\n      mimeType\n      name\n      sourceUrl\n      width\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetArticleById($id: ID!) {\n  article(id: $id, idType: DATABASE_ID) {\n    articleId\n    content\n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    featuredImageDatabaseId\n    featuredImageId\n    id\n    isTermNode\n    modified\n    modifiedGmt\n    parentDatabaseId\n    parentId\n    password\n    previewRevisionDatabaseId\n    previewRevisionId\n    slug\n    status\n    title\n    uri\n    articleDetails {\n      displayDate\n      displayOnFrontPage\n      fieldGroupName\n      publicationDate\n      source\n      subtitle\n      suppressDate\n      tableOfContentsTitle\n    }\n    featuredImage {\n      node {\n        ...FragmentFeaturedImage\n      }\n    }\n  }\n}"): (typeof documents)["query GetArticleById($id: ID!) {\n  article(id: $id, idType: DATABASE_ID) {\n    articleId\n    content\n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    featuredImageDatabaseId\n    featuredImageId\n    id\n    isTermNode\n    modified\n    modifiedGmt\n    parentDatabaseId\n    parentId\n    password\n    previewRevisionDatabaseId\n    previewRevisionId\n    slug\n    status\n    title\n    uri\n    articleDetails {\n      displayDate\n      displayOnFrontPage\n      fieldGroupName\n      publicationDate\n      source\n      subtitle\n      suppressDate\n      tableOfContentsTitle\n    }\n    featuredImage {\n      node {\n        ...FragmentFeaturedImage\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetArticleByUri($uri: ID!) {\n  article(id: $uri, idType: URI) {\n    articleId\n    content\n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    featuredImageDatabaseId\n    featuredImageId\n    id\n    modified\n    modifiedGmt\n    slug\n    status\n    title\n    uri\n    articleDetails {\n      displayDate\n      displayOnFrontPage\n      fieldGroupName\n      publicationDate\n      source\n      subtitle\n      suppressDate\n      tableOfContentsTitle\n      relatedPdf {\n        nodes {\n          __typename\n          ... on PdfItem {\n            ...FragmentPdfItem\n          }\n        }\n      }\n      relatedAudio {\n        nodes {\n          __typename\n          ... on AudioItem {\n            ...FragmentAudioItem\n          }\n        }\n      }\n      relatedJournal {\n        nodes {\n          __typename\n          ... on JournalIssue {\n            ...FragmentJournalIssue\n            journalIssueDetails {\n              ...FragmentJournalIssueDetails\n            }\n          }\n        }\n      }\n      relatedArticle {\n        nodes {\n          ...FragmentRelatedArticle\n        }\n      }\n      relatedVideo {\n        __typename\n        nodes {\n          contentTypeName\n          ... on VideoItem {\n            ...FragmentVideoItem\n          }\n        }\n      }\n      relatedBook {\n        __typename\n        nodes {\n          ... on Book {\n            ...FragmentBook\n          }\n        }\n      }\n    }\n    featuredImage {\n      node {\n        __typename\n        ...FragmentFeaturedImage\n      }\n    }\n    terms {\n      nodes {\n        __typename\n        ...FragmentTerms\n      }\n    }\n  }\n}"): (typeof documents)["query GetArticleByUri($uri: ID!) {\n  article(id: $uri, idType: URI) {\n    articleId\n    content\n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    featuredImageDatabaseId\n    featuredImageId\n    id\n    modified\n    modifiedGmt\n    slug\n    status\n    title\n    uri\n    articleDetails {\n      displayDate\n      displayOnFrontPage\n      fieldGroupName\n      publicationDate\n      source\n      subtitle\n      suppressDate\n      tableOfContentsTitle\n      relatedPdf {\n        nodes {\n          __typename\n          ... on PdfItem {\n            ...FragmentPdfItem\n          }\n        }\n      }\n      relatedAudio {\n        nodes {\n          __typename\n          ... on AudioItem {\n            ...FragmentAudioItem\n          }\n        }\n      }\n      relatedJournal {\n        nodes {\n          __typename\n          ... on JournalIssue {\n            ...FragmentJournalIssue\n            journalIssueDetails {\n              ...FragmentJournalIssueDetails\n            }\n          }\n        }\n      }\n      relatedArticle {\n        nodes {\n          ...FragmentRelatedArticle\n        }\n      }\n      relatedVideo {\n        __typename\n        nodes {\n          contentTypeName\n          ... on VideoItem {\n            ...FragmentVideoItem\n          }\n        }\n      }\n      relatedBook {\n        __typename\n        nodes {\n          ... on Book {\n            ...FragmentBook\n          }\n        }\n      }\n    }\n    featuredImage {\n      node {\n        __typename\n        ...FragmentFeaturedImage\n      }\n    }\n    terms {\n      nodes {\n        __typename\n        ...FragmentTerms\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetArticles($language: LanguageCodeFilterEnum!) {\n  articles(\n    first: 50\n    where: {orderby: {field: META_VALUE_NUM, order: DESC}, metaKey: \"publication_date\", metaQuery: [{key: \"display_on_front_page\", compare: \"=\", value: \"1\"}], language: $language}\n  ) {\n    nodes {\n      id\n      title\n      content\n      slug\n      featuredImage {\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n      articleDetails {\n        displayDate\n        displayOnFrontPage\n        fieldGroupName\n        publicationDate\n        source\n        subtitle\n        suppressDate\n        tableOfContentsTitle\n        relatedJournal {\n          edges {\n            node {\n              ... on JournalIssue {\n                contentTypeName\n                databaseId\n                date\n                dateGmt\n                featuredImageDatabaseId\n                featuredImageId\n                guid\n                id\n                isContentNode\n                journalIssueId\n                link\n                slug\n                status\n                uri\n                title\n              }\n            }\n          }\n        }\n      }\n      uri\n      language {\n        code\n        homeUrl\n        id\n        locale\n        name\n        slug\n      }\n    }\n  }\n}"): (typeof documents)["query GetArticles($language: LanguageCodeFilterEnum!) {\n  articles(\n    first: 50\n    where: {orderby: {field: META_VALUE_NUM, order: DESC}, metaKey: \"publication_date\", metaQuery: [{key: \"display_on_front_page\", compare: \"=\", value: \"1\"}], language: $language}\n  ) {\n    nodes {\n      id\n      title\n      content\n      slug\n      featuredImage {\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n      articleDetails {\n        displayDate\n        displayOnFrontPage\n        fieldGroupName\n        publicationDate\n        source\n        subtitle\n        suppressDate\n        tableOfContentsTitle\n        relatedJournal {\n          edges {\n            node {\n              ... on JournalIssue {\n                contentTypeName\n                databaseId\n                date\n                dateGmt\n                featuredImageDatabaseId\n                featuredImageId\n                guid\n                id\n                isContentNode\n                journalIssueId\n                link\n                slug\n                status\n                uri\n                title\n              }\n            }\n          }\n        }\n      }\n      uri\n      language {\n        code\n        homeUrl\n        id\n        locale\n        name\n        slug\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetArticlesByPlaceSlug($slug: ID!) {\n  termNode(id: $slug, taxonomy: PLACE, idType: SLUG) {\n    count\n    databaseId\n    description\n    id\n    isTermNode\n    name\n    slug\n    taxonomyName\n    termGroupId\n    termTaxonomyId\n    uri\n    ... on Place {\n      __typename\n      name\n      slug\n      uri\n      contentNodes {\n        nodes {\n          ... on Article {\n            __typename\n            articleId\n            contentTypeName\n            databaseId\n            date\n            dateGmt\n            featuredImageDatabaseId\n            featuredImageId\n            id\n            isContentNode\n            modified\n            modifiedGmt\n            parentDatabaseId\n            parentId\n            password\n            previewRevisionDatabaseId\n            previewRevisionId\n            slug\n            status\n            title\n            uri\n            articleDetails {\n              displayDate\n              displayOnFrontPage\n              publicationDate\n              source\n              subtitle\n              suppressDate\n              tableOfContentsTitle\n            }\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GetArticlesByPlaceSlug($slug: ID!) {\n  termNode(id: $slug, taxonomy: PLACE, idType: SLUG) {\n    count\n    databaseId\n    description\n    id\n    isTermNode\n    name\n    slug\n    taxonomyName\n    termGroupId\n    termTaxonomyId\n    uri\n    ... on Place {\n      __typename\n      name\n      slug\n      uri\n      contentNodes {\n        nodes {\n          ... on Article {\n            __typename\n            articleId\n            contentTypeName\n            databaseId\n            date\n            dateGmt\n            featuredImageDatabaseId\n            featuredImageId\n            id\n            isContentNode\n            modified\n            modifiedGmt\n            parentDatabaseId\n            parentId\n            password\n            previewRevisionDatabaseId\n            previewRevisionId\n            slug\n            status\n            title\n            uri\n            articleDetails {\n              displayDate\n              displayOnFrontPage\n              publicationDate\n              source\n              subtitle\n              suppressDate\n              tableOfContentsTitle\n            }\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetArticlesByTopicSlug($slug: ID!) {\n  termNode(id: $slug, taxonomy: TOPIC, idType: SLUG) {\n    count\n    databaseId\n    description\n    id\n    isTermNode\n    name\n    slug\n    taxonomyName\n    termGroupId\n    termTaxonomyId\n    uri\n    ... on Topic {\n      __typename\n      name\n      slug\n      uri\n      contentNodes {\n        nodes {\n          ... on Article {\n            __typename\n            articleId\n            contentTypeName\n            databaseId\n            date\n            dateGmt\n            featuredImageDatabaseId\n            featuredImageId\n            id\n            isContentNode\n            modified\n            modifiedGmt\n            parentDatabaseId\n            parentId\n            password\n            previewRevisionDatabaseId\n            previewRevisionId\n            slug\n            status\n            title\n            uri\n            articleDetails {\n              displayDate\n              displayOnFrontPage\n              publicationDate\n              source\n              subtitle\n              suppressDate\n              tableOfContentsTitle\n            }\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GetArticlesByTopicSlug($slug: ID!) {\n  termNode(id: $slug, taxonomy: TOPIC, idType: SLUG) {\n    count\n    databaseId\n    description\n    id\n    isTermNode\n    name\n    slug\n    taxonomyName\n    termGroupId\n    termTaxonomyId\n    uri\n    ... on Topic {\n      __typename\n      name\n      slug\n      uri\n      contentNodes {\n        nodes {\n          ... on Article {\n            __typename\n            articleId\n            contentTypeName\n            databaseId\n            date\n            dateGmt\n            featuredImageDatabaseId\n            featuredImageId\n            id\n            isContentNode\n            modified\n            modifiedGmt\n            parentDatabaseId\n            parentId\n            password\n            previewRevisionDatabaseId\n            previewRevisionId\n            slug\n            status\n            title\n            uri\n            articleDetails {\n              displayDate\n              displayOnFrontPage\n              publicationDate\n              source\n              subtitle\n              suppressDate\n              tableOfContentsTitle\n            }\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetAvailableLanguages {\n  languages {\n    code\n    homeUrl\n    id\n    locale\n    name\n    slug\n  }\n}"): (typeof documents)["query GetAvailableLanguages {\n  languages {\n    code\n    homeUrl\n    id\n    locale\n    name\n    slug\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetBooks {\n  books {\n    nodes {\n      contentTypeName\n      featuredImageDatabaseId\n      featuredImageId\n      id\n      isComment\n      isContentNode\n      isFrontPage\n      isPostsPage\n      isPreview\n      isRestricted\n      isTermNode\n      link\n      modified\n      modifiedGmt\n      parentDatabaseId\n      parentId\n      password\n      previewRevisionDatabaseId\n      previewRevisionId\n      slug\n      status\n      title\n      uri\n      bookDetails {\n        displayOnIbtBooks\n        fieldGroupName\n        subheading\n        summary\n        relatedArticles {\n          edges {\n            node {\n              ... on Article {\n                contentTypeName\n                guid\n                id\n                link\n                slug\n                status\n                title\n                uri\n                articleDetails {\n                  tableOfContentsTitle\n                  subtitle\n                  displayDate\n                  displayOnFrontPage\n                  publicationDate\n                }\n              }\n            }\n          }\n        }\n      }\n      featuredImage {\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GetBooks {\n  books {\n    nodes {\n      contentTypeName\n      featuredImageDatabaseId\n      featuredImageId\n      id\n      isComment\n      isContentNode\n      isFrontPage\n      isPostsPage\n      isPreview\n      isRestricted\n      isTermNode\n      link\n      modified\n      modifiedGmt\n      parentDatabaseId\n      parentId\n      password\n      previewRevisionDatabaseId\n      previewRevisionId\n      slug\n      status\n      title\n      uri\n      bookDetails {\n        displayOnIbtBooks\n        fieldGroupName\n        subheading\n        summary\n        relatedArticles {\n          edges {\n            node {\n              ... on Article {\n                contentTypeName\n                guid\n                id\n                link\n                slug\n                status\n                title\n                uri\n                articleDetails {\n                  tableOfContentsTitle\n                  subtitle\n                  displayDate\n                  displayOnFrontPage\n                  publicationDate\n                }\n              }\n            }\n          }\n        }\n      }\n      featuredImage {\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetGlobalSettings {\n  globalSettings {\n    fGGlobalSettings {\n      bannerImage {\n        cursor\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n      notificationBar {\n        fieldGroupName\n        notificationMessage\n        notificationOnoff\n      }\n      bannerImageTwitter {\n        cursor\n        node {\n          altText\n          srcSet\n          sourceUrl\n          mediaDetails {\n            height\n            width\n          }\n        }\n      }\n      bannerImageTwitterSquare {\n        cursor\n        node {\n          altText\n          srcSet\n          sourceUrl\n          mediaDetails {\n            height\n            width\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GetGlobalSettings {\n  globalSettings {\n    fGGlobalSettings {\n      bannerImage {\n        cursor\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n      notificationBar {\n        fieldGroupName\n        notificationMessage\n        notificationOnoff\n      }\n      bannerImageTwitter {\n        cursor\n        node {\n          altText\n          srcSet\n          sourceUrl\n          mediaDetails {\n            height\n            width\n          }\n        }\n      }\n      bannerImageTwitterSquare {\n        cursor\n        node {\n          altText\n          srcSet\n          sourceUrl\n          mediaDetails {\n            height\n            width\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetJournalByUri($uri: String!) {\n  journalIssueBy(uri: $uri) {\n    title\n    featuredImage {\n      node {\n        ...FragmentFeaturedImage\n      }\n    }\n    journalIssueDetails {\n      ...FragmentJournalIssueDetails\n    }\n  }\n}"): (typeof documents)["query GetJournalByUri($uri: String!) {\n  journalIssueBy(uri: $uri) {\n    title\n    featuredImage {\n      node {\n        ...FragmentFeaturedImage\n      }\n    }\n    journalIssueDetails {\n      ...FragmentJournalIssueDetails\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetJournalIssues($language: LanguageCodeFilterEnum!) {\n  journalIssues(where: {language: $language}) {\n    nodes {\n      journalIssueDetails {\n        ...FragmentJournalIssueDetails\n      }\n      slug\n      title\n      featuredImage {\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n      language {\n        code\n        locale\n        name\n        slug\n      }\n    }\n  }\n}"): (typeof documents)["query GetJournalIssues($language: LanguageCodeFilterEnum!) {\n  journalIssues(where: {language: $language}) {\n    nodes {\n      journalIssueDetails {\n        ...FragmentJournalIssueDetails\n      }\n      slug\n      title\n      featuredImage {\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n      language {\n        code\n        locale\n        name\n        slug\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetJournalIssuesLatest {\n  journalIssues(\n    where: {metaQuery: [{key: \"publication_date\", compare: \"EXISTS\"}], orderby: {field: META_VALUE_NUM, order: DESC}, metaKey: \"publication_date\"}\n    first: 1\n  ) {\n    nodes {\n      journalIssueDetails {\n        fieldGroupName\n        publicationDate\n      }\n      slug\n      title\n      featuredImage {\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GetJournalIssuesLatest {\n  journalIssues(\n    where: {metaQuery: [{key: \"publication_date\", compare: \"EXISTS\"}], orderby: {field: META_VALUE_NUM, order: DESC}, metaKey: \"publication_date\"}\n    first: 1\n  ) {\n    nodes {\n      journalIssueDetails {\n        fieldGroupName\n        publicationDate\n      }\n      slug\n      title\n      featuredImage {\n        node {\n          ...FragmentFeaturedImage\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query getPageByUri($uri: String!) {\n  pageBy(uri: $uri) {\n    title\n    contentTypeName\n    author {\n      cursor\n    }\n    content\n    date\n    dateGmt\n    modified\n    modifiedGmt\n    pageId\n    uri\n  }\n}"): (typeof documents)["query getPageByUri($uri: String!) {\n  pageBy(uri: $uri) {\n    title\n    contentTypeName\n    author {\n      cursor\n    }\n    content\n    date\n    dateGmt\n    modified\n    modifiedGmt\n    pageId\n    uri\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetPlaceholderSettings {\n  placeholderSettings {\n    placeholderSettingsFields {\n      placeholderSetup {\n        contentSelector\n        placeholderSelector\n        textContentGroup {\n          freeTextHeading\n          freeTextImage {\n            node {\n              altText\n              caption\n              contentTypeName\n              databaseId\n              description\n              guid\n              id\n              link\n              mediaItemId\n              mediaItemUrl\n              mediaType\n              slug\n              sourceUrl\n              srcSet\n              uri\n              dateGmt\n            }\n          }\n          freeTextLink {\n            nodes {\n              contentTypeName\n              databaseId\n              id\n              modifiedGmt\n              slug\n              status\n              uri\n              dateGmt\n            }\n          }\n          freeTextContent\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GetPlaceholderSettings {\n  placeholderSettings {\n    placeholderSettingsFields {\n      placeholderSetup {\n        contentSelector\n        placeholderSelector\n        textContentGroup {\n          freeTextHeading\n          freeTextImage {\n            node {\n              altText\n              caption\n              contentTypeName\n              databaseId\n              description\n              guid\n              id\n              link\n              mediaItemId\n              mediaItemUrl\n              mediaType\n              slug\n              sourceUrl\n              srcSet\n              uri\n              dateGmt\n            }\n          }\n          freeTextLink {\n            nodes {\n              contentTypeName\n              databaseId\n              id\n              modifiedGmt\n              slug\n              status\n              uri\n              dateGmt\n            }\n          }\n          freeTextContent\n        }\n      }\n    }\n  }\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;